{
  "uid" : "6e3c04985ad6a501",
  "name" : "test_station_info[caseinfo2]",
  "fullName" : "testcase.test_3_station_info.Test_station_info#test_station_info",
  "historyId" : "5982490776b37ea17ec9b40b275b90d0",
  "time" : {
    "start" : 1699172935022,
    "stop" : 1699172936231,
    "duration" : 1209
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_3_station_info.Test_station_info object at 0x000002B7035C1198>\ncaseinfo = {'assert': 'status', 'header': 'BI4015#NgrpB7iW5bNqFuw3vZRG3p', 'name': '测试用例3：传入实时时间，设备sn号，正确cookie值,不传参数值state,不能获取设...a': {'t': '1699172935'}, 'fields': 'mode,wifi,wan,enduser,status', 'method': 'get', 'station': '080052203000111', ...}}\n\n>   ???\n\nF:\\Project\\noc_api_auto\\testcase\\test_3_station_info.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assert_case.ResponseAssert object at 0x000002B7036D85F8>\nexcepct = 'status', actual = {'detail': 'HTTP 401: Unauthorized'}\n\n    def assert_in(self,excepct,actual):\n        if '{' in str(excepct):\n            if  (str(excepct).split('{')[1].split('}')[0]) in str(actual):\n                get_log().info(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().info(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().info(\"测试结果：预期结果包含在实际结果内，测试用例通过\")\n                assert True\n            else:\n                get_log().error(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().error(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().error(\"测试结果：实际结果不包含在预期结果内，测试用例失败\")\n                assert False\n        else:\n            if str(excepct) in str(actual):\n                get_log().info(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().info(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().info(\"测试结果：预期结果包含在实际结果内，测试用例通过\")\n                assert True\n            else:\n                get_log().error(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().error(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().error(\"测试结果：实际结果不包含在预期结果内，测试用例失败\")\n>               assert False\nE               AssertionError\n\ncommon\\assert_case.py:44: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "clean_yaml",
    "time" : {
      "start" : 1699172927861,
      "stop" : 1699172927862,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "delet_log",
    "time" : {
      "start" : 1699172927862,
      "stop" : 1699172927863,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "login",
    "time" : {
      "start" : 1699172927863,
      "stop" : 1699172929734,
      "duration" : 1871
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_3_station_info.Test_station_info object at 0x000002B7035C1198>\ncaseinfo = {'assert': 'status', 'header': 'BI4015#NgrpB7iW5bNqFuw3vZRG3p', 'name': '测试用例3：传入实时时间，设备sn号，正确cookie值,不传参数值state,不能获取设...a': {'t': '1699172935'}, 'fields': 'mode,wifi,wan,enduser,status', 'method': 'get', 'station': '080052203000111', ...}}\n\n>   ???\n\nF:\\Project\\noc_api_auto\\testcase\\test_3_station_info.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.assert_case.ResponseAssert object at 0x000002B7036D85F8>\nexcepct = 'status', actual = {'detail': 'HTTP 401: Unauthorized'}\n\n    def assert_in(self,excepct,actual):\n        if '{' in str(excepct):\n            if  (str(excepct).split('{')[1].split('}')[0]) in str(actual):\n                get_log().info(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().info(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().info(\"测试结果：预期结果包含在实际结果内，测试用例通过\")\n                assert True\n            else:\n                get_log().error(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().error(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().error(\"测试结果：实际结果不包含在预期结果内，测试用例失败\")\n                assert False\n        else:\n            if str(excepct) in str(actual):\n                get_log().info(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().info(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().info(\"测试结果：预期结果包含在实际结果内，测试用例通过\")\n                assert True\n            else:\n                get_log().error(f\"断言检查点：预期响应结果 {excepct}\")\n                get_log().error(f\"断言检查点：实际结果响应结果 {actual}\")\n                get_log().error(\"测试结果：实际结果不包含在预期结果内，测试用例失败\")\n>               assert False\nE               AssertionError\n\ncommon\\assert_case.py:44: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "eb153c677ebebd08",
      "name" : "log",
      "source" : "eb153c677ebebd08.txt",
      "type" : "text/plain",
      "size" : 1003
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "查询设备详细信息模块"
  }, {
    "name" : "tag",
    "value" : "station_info"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_3_station_info"
  }, {
    "name" : "subSuite",
    "value" : "Test_station_info"
  }, {
    "name" : "host",
    "value" : "ycccccc"
  }, {
    "name" : "thread",
    "value" : "14148-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_3_station_info"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "caseinfo",
    "value" : "{'name': '测试用例3：传入实时时间，设备sn号，正确cookie值,不传参数值state,不能获取设备总数量', 'request': {'method': 'get', 'url': 'https://noc-test.merckuwifi.com/api/meshes/', 'station': '080052203000111', 'fields': 'mode,wifi,wan,enduser,status', 'data': {'t': None}}, 'header': None, 'assert': 'status'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "station_info" ]
  },
  "source" : "6e3c04985ad6a501.json",
  "parameterValues" : [ "{'name': '测试用例3：传入实时时间，设备sn号，正确cookie值,不传参数值state,不能获取设备总数量', 'request': {'method': 'get', 'url': 'https://noc-test.merckuwifi.com/api/meshes/', 'station': '080052203000111', 'fields': 'mode,wifi,wan,enduser,status', 'data': {'t': None}}, 'header': None, 'assert': 'status'}" ]
}